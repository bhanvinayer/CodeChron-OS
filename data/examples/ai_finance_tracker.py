# AI-Generated Personal Finance Tracker
# Created with VibeCode 2025 using natural language: "Create a smart personal finance tracker that learns from my spending habits and gives intelligent recommendations"

import json
import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass
import matplotlib.pyplot as plt
import pandas as pd

@dataclass
class Transaction:
    """Represents a financial transaction"""
    id: str
    date: datetime.date
    amount: float
    category: str
    description: str
    is_income: bool
    tags: List[str]
    confidence_score: float  # AI confidence in categorization

class AIFinanceTracker:
    """
    Smart personal finance tracker with AI-powered insights
    Generated by VibeCode 2025's natural language processing
    """
    
    def __init__(self):
        self.transactions: List[Transaction] = []
        self.categories = {
            'income': ['salary', 'freelance', 'investment', 'gift'],
            'essential': ['rent', 'utilities', 'groceries', 'insurance', 'transport'],
            'lifestyle': ['dining', 'entertainment', 'shopping', 'subscription'],
            'savings': ['emergency_fund', 'investment', 'retirement'],
            'health': ['medical', 'pharmacy', 'fitness', 'wellness']
        }
        self.spending_patterns = {}
        self.ai_insights = []
    
    def add_transaction(self, amount: float, description: str, 
                       category: Optional[str] = None) -> Transaction:
        """Add a new transaction with AI-powered categorization"""
        
        # AI categorization based on description
        if not category:
            category = self._ai_categorize(description)
        
        transaction = Transaction(
            id=f"txn_{len(self.transactions) + 1}",
            date=datetime.date.today(),
            amount=amount,
            category=category,
            description=description,
            is_income=amount > 0,
            tags=self._extract_tags(description),
            confidence_score=self._calculate_confidence(description, category)
        )
        
        self.transactions.append(transaction)
        self._update_spending_patterns()
        self._generate_ai_insights()
        
        return transaction
    
    def _ai_categorize(self, description: str) -> str:
        """AI-powered categorization of transactions"""
        description_lower = description.lower()
        
        # Income detection
        income_keywords = ['salary', 'paycheck', 'freelance', 'dividend', 'bonus']
        if any(keyword in description_lower for keyword in income_keywords):
            return 'income'
        
        # Essential expenses
        essential_keywords = ['rent', 'mortgage', 'electric', 'gas', 'water', 'groceries', 'insurance']
        if any(keyword in description_lower for keyword in essential_keywords):
            return 'essential'
        
        # Lifestyle expenses
        lifestyle_keywords = ['restaurant', 'movie', 'amazon', 'shopping', 'spotify', 'netflix']
        if any(keyword in description_lower for keyword in lifestyle_keywords):
            return 'lifestyle'
        
        # Health expenses
        health_keywords = ['pharmacy', 'doctor', 'hospital', 'gym', 'fitness']
        if any(keyword in description_lower for keyword in health_keywords):
            return 'health'
        
        # Default to lifestyle if uncertain
        return 'lifestyle'
    
    def _extract_tags(self, description: str) -> List[str]:
        """Extract relevant tags from transaction description"""
        tags = []
        description_lower = description.lower()
        
        # Location tags
        if 'online' in description_lower or 'amazon' in description_lower:
            tags.append('online')
        if 'atm' in description_lower:
            tags.append('cash')
        
        # Frequency tags
        if 'subscription' in description_lower or 'monthly' in description_lower:
            tags.append('recurring')
        
        # Amount-based tags
        # This would be determined after we know the amount
        
        return tags
    
    def _calculate_confidence(self, description: str, category: str) -> float:
        """Calculate AI confidence in categorization (0-1)"""
        # Simple confidence calculation based on keyword matches
        description_lower = description.lower()
        category_keywords = []
        
        for cat_type, keywords in self.categories.items():
            if category in keywords:
                category_keywords = keywords
                break
        
        matches = sum(1 for keyword in category_keywords if keyword in description_lower)
        return min(matches * 0.3 + 0.4, 1.0)  # Base confidence + keyword boost
    
    def _update_spending_patterns(self):
        """Update spending pattern analysis"""
        if len(self.transactions) < 5:
            return
        
        # Analyze spending by category
        category_spending = {}
        monthly_spending = {}
        
        for transaction in self.transactions:
            if not transaction.is_income:
                # Category analysis
                if transaction.category not in category_spending:
                    category_spending[transaction.category] = []
                category_spending[transaction.category].append(abs(transaction.amount))
                
                # Monthly analysis
                month_key = transaction.date.strftime('%Y-%m')
                if month_key not in monthly_spending:
                    monthly_spending[month_key] = 0
                monthly_spending[month_key] += abs(transaction.amount)
        
        self.spending_patterns = {
            'by_category': category_spending,
            'by_month': monthly_spending
        }
    
    def _generate_ai_insights(self):
        """Generate AI-powered financial insights"""
        if len(self.transactions) < 10:
            return
        
        insights = []
        
        # Spending trend analysis
        recent_transactions = self.transactions[-30:]  # Last 30 transactions
        total_spent = sum(abs(t.amount) for t in recent_transactions if not t.is_income)
        avg_transaction = total_spent / len([t for t in recent_transactions if not t.is_income])
        
        if avg_transaction > 50:
            insights.append({
                'type': 'spending_alert',
                'message': f'Your average transaction amount is ${avg_transaction:.2f}. Consider reviewing larger purchases.',
                'confidence': 0.8,
                'priority': 'medium'
            })
        
        # Category analysis
        if 'by_category' in self.spending_patterns:
            for category, amounts in self.spending_patterns['by_category'].items():
                if len(amounts) >= 5:
                    avg_amount = sum(amounts) / len(amounts)
                    if category == 'lifestyle' and avg_amount > 100:
                        insights.append({
                            'type': 'category_insight',
                            'message': f'Your {category} spending averages ${avg_amount:.2f}. Consider setting a monthly budget.',
                            'confidence': 0.9,
                            'priority': 'high'
                        })
        
        # Savings opportunity detection
        income_total = sum(t.amount for t in self.transactions if t.is_income)
        expense_total = sum(abs(t.amount) for t in self.transactions if not t.is_income)
        
        if income_total > 0:
            savings_rate = (income_total - expense_total) / income_total
            if savings_rate < 0.2:  # Less than 20% savings rate
                insights.append({
                    'type': 'savings_opportunity',
                    'message': f'Your savings rate is {savings_rate*100:.1f}%. Try to aim for 20% or higher.',
                    'confidence': 0.95,
                    'priority': 'high'
                })
        
        self.ai_insights = insights
    
    def get_financial_summary(self) -> Dict:
        """Get comprehensive financial summary with AI insights"""
        total_income = sum(t.amount for t in self.transactions if t.is_income)
        total_expenses = sum(abs(t.amount) for t in self.transactions if not t.is_income)
        net_worth_change = total_income - total_expenses
        
        return {
            'summary': {
                'total_income': total_income,
                'total_expenses': total_expenses,
                'net_change': net_worth_change,
                'transaction_count': len(self.transactions)
            },
            'spending_patterns': self.spending_patterns,
            'ai_insights': self.ai_insights,
            'recommendations': self._get_ai_recommendations()
        }
    
    def _get_ai_recommendations(self) -> List[Dict]:
        """Generate personalized AI recommendations"""
        recommendations = []
        
        if len(self.transactions) < 5:
            recommendations.append({
                'title': 'Keep tracking!',
                'description': 'Add more transactions to get personalized insights.',
                'action': 'Continue logging your expenses for better AI analysis.'
            })
            return recommendations
        
        # Budget recommendations
        if 'by_category' in self.spending_patterns:
            top_category = max(self.spending_patterns['by_category'].items(), 
                             key=lambda x: sum(x[1]))
            recommendations.append({
                'title': f'Optimize {top_category[0]} spending',
                'description': f'This is your highest spending category (${sum(top_category[1]):.2f} total).',
                'action': f'Set a monthly budget for {top_category[0]} expenses.'
            })
        
        # Investment recommendations
        total_income = sum(t.amount for t in self.transactions if t.is_income)
        if total_income > 1000:
            recommendations.append({
                'title': 'Consider automated investing',
                'description': 'With your income level, automated investing could help grow your wealth.',
                'action': 'Set up automatic transfers to a diversified investment account.'
            })
        
        return recommendations
    
    def export_data(self, filename: str):
        """Export transaction data to JSON"""
        data = {
            'transactions': [
                {
                    'id': t.id,
                    'date': t.date.isoformat(),
                    'amount': t.amount,
                    'category': t.category,
                    'description': t.description,
                    'is_income': t.is_income,
                    'tags': t.tags,
                    'confidence_score': t.confidence_score
                }
                for t in self.transactions
            ],
            'insights': self.ai_insights,
            'patterns': self.spending_patterns
        }
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)

# Example usage and demo
def demo_finance_tracker():
    """Demonstrate the AI Finance Tracker capabilities"""
    print("🤖 AI-Powered Personal Finance Tracker")
    print("=" * 50)
    
    tracker = AIFinanceTracker()
    
    # Add sample transactions
    sample_transactions = [
        (2500, "Monthly salary deposit"),
        (-1200, "Rent payment to landlord"),
        (-85, "Grocery shopping at Whole Foods"),
        (-45, "Netflix monthly subscription"),
        (-120, "Dinner at Italian restaurant"),
        (-30, "Spotify premium subscription"), 
        (-200, "Electric bill payment"),
        (-75, "Gas station fill-up"),
        (-150, "Amazon online shopping"),
        (-60, "Pharmacy prescription pickup"),
        (500, "Freelance web design project"),
        (-90, "Gym membership monthly fee")
    ]
    
    print("Adding sample transactions...")
    for amount, description in sample_transactions:
        transaction = tracker.add_transaction(amount, description)
        print(f"  {transaction.date}: ${amount:+.2f} - {description} [{transaction.category}] (Confidence: {transaction.confidence_score:.2f})")
    
    print("\n" + "=" * 50)
    print("📊 FINANCIAL SUMMARY")
    print("=" * 50)
    
    summary = tracker.get_financial_summary()
    
    print(f"💰 Total Income: ${summary['summary']['total_income']:.2f}")
    print(f"💸 Total Expenses: ${summary['summary']['total_expenses']:.2f}")
    print(f"📈 Net Change: ${summary['summary']['net_change']:+.2f}")
    print(f"📝 Transactions: {summary['summary']['transaction_count']}")
    
    print("\n🧠 AI INSIGHTS:")
    for insight in summary['ai_insights']:
        priority_emoji = "🔴" if insight['priority'] == 'high' else "🟡" if insight['priority'] == 'medium' else "🟢"
        print(f"  {priority_emoji} {insight['message']} (Confidence: {insight['confidence']:.1%})")
    
    print("\n💡 AI RECOMMENDATIONS:")
    for rec in summary['recommendations']:
        print(f"  ✨ {rec['title']}")
        print(f"     {rec['description']}")
        print(f"     Action: {rec['action']}")
        print()
    
    # Export data
    tracker.export_data('finance_data.json')
    print("📁 Data exported to 'finance_data.json'")

if __name__ == "__main__":
    demo_finance_tracker()
